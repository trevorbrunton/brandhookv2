"use client";

import { useQuery, useMutation } from "@tanstack/react-query";
import Markdown from "react-markdown";
import { PDFViewer } from "@/components/pdf-viewer";
import { createPdfFromMarkdown } from "@/lib/md-parser";
import { Loader, Save } from "lucide-react";
import { Button } from "@/components/ui/button";


import { MainContentRow } from "@/components/main-content-row";
import { PageHeader } from "@/components/page-header";
import { currentUser } from "@clerk/nextjs/server";

import { NavSideBar } from "@/components/navbars/nav-side-bar";
import { PageFrame } from "@/components/pageframe";
import { fetchAllInterviewSummariesByProjectId } from "@/app/actions/fetch-all-interview-summaries-by-projectId";
import { saveDocToDb } from "@/app/actions/save-doc-to-db";
import { ProjectDocument } from "@prisma/client";


type DialogProps = {
    projectId: string;
    userId: string;
  };


async function summarizeInterviews(interviews: strings) {
  const response = await fetch("/api/summarise-interviews", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ interviews }),
  });
  if (!response.ok) {
    throw new Error("Failed to summarize interviews");
  }
  return response.json();
}



export default function SummarisePage({ projectId, userId }: DialogProps) {




    //retrieve all documents by projectID
    const { data: dox, isLoading: isLoadingProject } = useQuery({
      queryKey: ["project", projectId],
        queryFn: () => {
          return fetchAllInterviewSummariesByProjectId(projectId);
        },
    }); 

    //concatenate all documents into one string
    const interviews = dox.map((doc) => doc.content).join("\n");

    









  const saveMutation = useMutation({
    mutationFn: async (content: string) => {
      const newDocument: ProjectDocument = {
        id: "",
        projectId,
        userId: "", // Add the correct userId here
        title: "Interview Summary",
        interviewee: "",
        interviewDate: new Date().toISOString(),
        content: content,
        fileUrl: `${process.env.NEXT_PUBLIC_S3_URL}${result}`, // Ensure 'result' is defined
        docType: activeDocClass, // Ensure 'activeDocClass' is defined
        createDate: new Date().toLocaleDateString("eu-AU"),
        updateDate: new Date().toLocaleDateString("eu-AU"),
      };
      await saveDocToDb(newDocument, projectId);
    },
  });

  const navItems = [
    {
      label: "Go Back",
      href: `/project-view/${projectId}`,
      tooltip: "Back to Project View",
    },
  ];

  const downloadDoc = () => {
    if (summary) {
      createPdfFromMarkdown(summary.message, "Project Summary");
    }
  };



  return (
    <div className="flex w-full flex-col ">
      <PageFrame page="home" userId={user.id} navItems={navItems}>
        <div className="flex flex-row flex-auto">
          <div className="hidden sm:block border-r border-gray-100 h-full text-brand-900 relative z-10">
            <NavSideBar page="home" userId={user.id} />
          </div>
          <div className="flex flex-col flex-auto">
            <PageHeader title="Home" />
            <MainContentRow>
              <ProjectTable />
            </MainContentRow>
          </div>
        </div>
      </PageFrame>
    </div>
  );
}
